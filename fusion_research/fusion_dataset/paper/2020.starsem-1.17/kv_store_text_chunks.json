{
  "chunk-d342986fead6b9e93e3b5e50b8194cac": {
    "tokens": 1200,
    "content": "# Find or Classify? Dual Strategy for Slot-Value Predictions on Multi-Domain Dialog State Tracking  \n\nJian-Guo Zhang1∗ Kazuma Hashimoto2† Chien-Sheng Wu2 Yao Wan3 Philip S. $\\mathbf{M}^{1}$ Richard Socher2 Caiming Xiong2  \n\n1 University of Illinois at Chicago, Chicago, USA 2Salesforce Research, Palo Alto, USA 3Huazhong University of Science and Technology, Wuhan, China {jzhan51,psyu}@uic.edu, wanyao@hust.edu.cn {k.hashimoto,wu.jason,rsocher,cxiong}@salesforce.com  \n\n# Abstract  \n\nDialog state tracking (DST) is a core component in task-oriented dialog systems. Existing approaches for DST mainly fall into one of two categories, namely, ontology-based and ontology-free methods. An ontology-based method selects a value from a candidate-value list for each target slot, while an ontology-free method extracts spans from dialog contexts. Recent work introduced a BERT-based model to strike a balance between the two methods by pre-defining categorical and non-categorical slots. However, it is not clear enough which slots are better handled by either of the two slot types, and the way to use the pre-trained model has not been well investigated. In this paper, we propose a simple yet effective dualstrategy model for DST, by adapting a single BERT-style reading comprehension model to jointly handle both the categorical and noncategorical slots. Our experiments on the MultiWOZ datasets show that our method significantly outperforms the BERT-based counterpart, finding that the key is a deep interaction between the domain-slot and context information. When evaluated on noisy (MultiWOZ 2.0) and cleaner (MultiWOZ 2.1) settings, our method performs competitively and robustly across the two different settings. Our method sets the new state of the art in the noisy setting, while performing more robustly than the best model in the cleaner setting. We also conduct a comprehensive error analysis on the dataset, including the effects of the dual strategy for each slot, to facilitate future research.  \n\n# 1 Introduction  \n\n![](images/image_1.jpg)  \n\nFigure 1: An example of dialog state tracking for booking a hotel and reserving a restaurant. Each turn contains a user utterance (grey) and a system utterance (orange). The dialog state tracker (green) tracks all the $<$ domain, slot, value $>$ triplets until the current turn. Blue color denotes the new state appearing at that turn. Best viewed in color.  \n\nVirtual assistants play important roles in facilitating our daily life, such as booking hotels, reserving restaurants and making travel plans. Dialog State Tracking (DST), which estimates users’ goal and intention based on conversation history, is a core component in task-oriented dialog systems (Young et al., 2013; Gao et al., 2019a). A dialog state consists of a set of $<$ domain, slot, value $>$ triplets, and DST aims to track all the states accumulated across the conversational turns. Fig. 1 shows a dialogue with corresponding annotated turn states.  \n\nTraditional approaches for DST usually rely on hand-crafted features and domain-specific lexicon, and can be categorized into two classes $\\mathrm{\\DeltaXu}$ and Hu, 2018; Gao et al., 2019b; Ramadan et al., 2018; Zhong et al., 2018): i.e., ontology-based and ontology-free. The ontology-based approaches (Ramadan et al., 2018; Zhong et al., 2018; Chen et al., 2020) require full access to the pre-defined ontology to perform classification over the candidatevalue list. However, in practice, we may not have access to an ontology or only have partial ontology in the industry. Even if a full ontology exists, it is computationally expensive to enumerate all the values when the full ontology for some slots is very large and diverse (Wu et al., 2019; Xu and Hu, 2018). The ontology-free approaches (Gao et al., 2019b; Xu and Hu, 2018) find slot values directly from the input source using a copy mechanism without requiring an ontology, e.g., learning span matching with start and end positions in the dialog context. However, it is nontrivial to handle situations where values do not appear in the dialog context or have various descriptions by users.  \n\nTo mitigate the above issues, recently, (Zhou and Small, 2019) introduced a question asking model to generate questions asking for values of eachdomain slot pair and a dynamic knowledge graph to learn relationships between the (domain, slot) pairs. (Rastogi et al., 2020) introduced a BERT-based model (Devlin et al., 2019) to strike a balance between the two methods by pre-defining categorical and non-categorical slots. However, more studies are needed to know which slots are better handled by either of the two slot types, and the way to use the pre-trained models is not well investigated (Lee et al., 2019; Gao et al., 2019b; Rastogi et al., 2020).  \n\nInspired by the task-oriented dialog schema design in (Rastogi et al., 2020) and the recent successful experience in locating text spans in machine reading comprehensions (Gao et al., 2019b; Asai et al., 2019). we design a simple yet effective DualStrategy Dialog State Tracking model (DS-DST), which adapts a single BERT question answering model to jointly handle both the categorical and non-categorical slots, and different with previous approaches on multi-domain DST, we enable the model with direct interactions between dialog context and the slot. We",
    "chunk_order_index": 0,
    "full_doc_id": "doc-10ea0afa395a52f98d2699434a2b05f1"
  },
  "chunk-212df6f08b9496aebe049dddcfe0c79c": {
    "tokens": 1200,
    "content": "0) and the recent successful experience in locating text spans in machine reading comprehensions (Gao et al., 2019b; Asai et al., 2019). we design a simple yet effective DualStrategy Dialog State Tracking model (DS-DST), which adapts a single BERT question answering model to jointly handle both the categorical and non-categorical slots, and different with previous approaches on multi-domain DST, we enable the model with direct interactions between dialog context and the slot. We decide whether a slot belongs to a non-categorical slot or a categorical slot by following the heuristics from (Rastogi et al., 2020). For example, it is common that when users book hotels, the requests for parking are usually yes or no with limited choices. These kinds of slots are defined as categorical slots, and the slot values are selected over a partial ontology. In addition, how long the user will stay has unlimited values and it can be found in the context. These kinds of slots are treated as non-categorical slots, and the values are found trough span matching in the dialog context. Hence, the model is flexible depending on the access level to the ontology or whether the values of slots could be found directly in the dialog context.  \n\nOur contributions are summarized as follows:  \n\nWe designed a simple yet effective dualstrategy model based on BERT with strong interactions between the dialog context and domain-slot pairs.  \n\nOur model achieves state of the art on MultiWOZ 2.0 (Budzianowski et al., 2018) and competitive performance on MultiWOZ 2.1 (Eric et al., 2019). Our model also performs robustly across the two different settings.  \n\nWe conducted a comprehensive error analysis on the dataset, including the effects of the dual strategy for each slot, to facilitate future research.  \n\n# 2 Related Work  \n\nMulti-domain DST, which tracks dialog states in complicated conversations across multiple domains with many slots, has been a hot research topic during the past few years, along with the development of Dialogue State Tracking Challenges (Williams et al., 2013; Henderson et al., 2014a,b; Kim et al., 2016, 2017, 2019). Traditional approaches usually rely on hand-crafted features or domain-specific lexicon (Henderson et al., $2014c$ ; Wen et al., 2016), making them difficult to be adapted to new domains. In addition, these approaches require a pre-defined full ontology, in which the values of a slot are constrained by a set of candidate values (Ramadan et al., 2018; Liu and Lane, 2017; Zhong et al., 2018; Lee et al., 2019; Chen et al., 2020). To tackle these issues, several methods have been proposed to extract slot values through span matching with start and end positions in the dialog context. For example, (Xu and Hu, 2018) utilizes an attentionbased pointer network to copy values from the dialog context. (Gao et al., 2019b) poses DST as a reading comprehension problem and incorporates a slot carryover model to copy states from previous conversational turns. However, tracking states only from the dialog context is insufficient since many values in DST cannot be exactly found in the context due to annotation errors or diverse descriptions of slot values from users. On the other hand, pre-trained models such as BERT (Devlin et al., 2019) and GPT (Radford et al., 2018) have shown promising performances in many downstream tasks. Among them, DSTreader (Gao et al., 2019b) utilizes BERT as word embeddings for dialog contexts, SUMBT (Lee et al., 2019) employs BERT to extract representations of candidate values, and BERT-DST (Rastogi et al., 2020) adopts BERT to encode the inputs of the user turn as well as the previous system turn. Different from these approaches where the dialog context and domain-slot pairs are usually separately encoded, we employ strong interactions to encode them. 1. Moreover, We investigate and provide insights to decide slot types and conduct a comprehensive analysis of the popular MultiWOZ datasets.  \n\nAnother direction for multi-domain DST is based on generative approaches (Lei et al., 2018; Wu et al., 2019; Le et al., 2020) which generate slot values without relying on fixed vocabularies and spans. However, such generative methods suffer from generating ill-formatted strings (e.g., repeated words) upon long strings, which is common in DST. For example, the hotel address may be long and a small difference makes the whole dialog state tracking incorrect. By contrast, both the categorical (picklist-based) and non-categorical (span-based) methods can rely on existing strings rather than generating them.  \n\n# 3 DS-DST: a Dual Strategy for DST  \n\nLet $X~=~\\left\\{(U_{1}^{s y s},U_{1}^{u s r}),\\cdot\\cdot\\cdot,(U_{T}^{s y s},U_{T}^{u s r})\\right\\}$ denote a set of pairs of a system utterance U tsysand a user utterance $U_{t}^{u s r}$ ($1\\leq t\\leq T)$ , given a dialogue context with $T$ turns. Each turn $(U_{t}^{s y s},U_{t}^{u s r})$ talks about a particular domain (e.g., hotel), and a certain number of slots (e.g., price range) are associated with the domain. We denote all the $N$ possible domain-slot pairs as ${\\cal S}\\,=\\,\\{{\\cal S}_{1},\\ldots",
    "chunk_order_index": 1,
    "full_doc_id": "doc-10ea0afa395a52f98d2699434a2b05f1"
  },
  "chunk-3833266841eb207cc0ecb59f88a8c765": {
    "tokens": 1200,
    "content": "leq t\\leq T)$ , given a dialogue context with $T$ turns. Each turn $(U_{t}^{s y s},U_{t}^{u s r})$ talks about a particular domain (e.g., hotel), and a certain number of slots (e.g., price range) are associated with the domain. We denote all the $N$ possible domain-slot pairs as ${\\cal S}\\,=\\,\\{{\\cal S}_{1},\\ldots,{\\cal S}_{N}\\}$ , where each domain-slot pair consists of $\\{s_{1},\\ldots,s_{n}\\}$ tokens, e.g., hotel-price range includes three tokens. Let $X_{t}~=~\\{(U_{1}^{s y s},U_{1}^{u s r}),\\ldots,(U_{t}^{s y s},U_{t}^{u s r})\\}$ denote the dialogue context at the $t_{t h}$ turn and $X_{t}$ has $\\{x_{1},\\ldots,x_{m}\\}$ tokens. Our goal is to predict the values for all the domain-slot pairs in $S$ . Here we assume that $M$ domain-slot pairs in $S$ are treated as non-categorical slots, and the remaining $N-M$ pairs as categorical slots. Each categorical slot has $L$ possible candidate values (picklist), i.e., $\\{V_{1},\\ldots,V_{L}\\}$ , where $L$ is the size of the picklist, and each value has $\\{v_{1},\\ldots,v_{c}\\}$ tokens.  \n\nBearing these notations in mind, we then propose a dual strategy model with direct interactions between dialog context and domain-slot pairs for DST. Fig. 2 shows an overview of the architecture of our proposed DS-DST model. We first utilize a pre-trained BERT (Devlin et al., 2019) to encode information about the dialogue context $X_{t}$ along with each domain-slot pair in $S$ , and obtain contextualized representations conditioned on the domain-slot information. We then design a slot gate to handle special types of values. In particular, for the non-categorical slots, we utilize a two-way linear mapping to find text spans. For the categorical slots, we select the most plausible values from the picklists based on the contextual representation.  \n\n# 3.1 Slot-Context Encoder  \n\nWe employ a pre-trained BERT (Devlin et al., 2019) to encode the domain-slot types and dialog contexts. For the $j_{t h}$ domain-slot pair and the dialog context $X_{t}$ at the $t_{t h}$ turn, we concatenate them and get corresponding representations:  \n\n$$\nR_{t j}=\\mathrm{BERT}\\left(\\left[\\mathrm{CLS}\\right]\\oplus S_{j}\\oplus\\left[\\mathrm{SEP}\\right]\\oplus X_{t}\\right),\n$$  \n\nwhere [CLS] is a special token added in front of each sample, and [SEP] is a special separator token. The outputs of BERT in Eq. (3.1) can be decomposed as $R_{t j}\\,=\\,[r_{t j}^{\\mathrm{CLS}},r_{t j}^{1},\\dotsc,r_{t j}^{K}]$ , where $r_{t j}^{\\mathrm{CLS}}$ is the aggregated representation of the total $K$ sequential input tokens, and $[r_{t j}^{1},\\ldots,r_{t j}^{K}]$ are the token-level representations. They are used for slotvalue predictions in the following sections, and the BERT is fine-tuned during the training process.  \n\n# 3.2 Slot-Gate Classification  \n\nAs there are many domain-slot pairs in multidomain dialogues, it is nontrivial to correctly predict whether a domain-slot pair appears at each turn of the dialogue. Here we follow (Wu et al., 2019; $\\mathrm{Xu}$ and Hu, 2018) and design a slot gate classification module for our neural network. Specifically, at the $t_{t h}$ turn, the classifier makes a decision among $\\{n o n e,d o n t c a r e,p r e d i c t i o n\\}$ , where none denotes that a domain-slot pair is not mentioned or the value is ‘none’ at this turn, dontcare implies that the user can accept any values for this slot, and prediction represents that the slot should be processed by the model with a real value. We utilize $r_{t j}^{\\mathrm{CLS}}$ for the slot-gate classification, and the probability for the $j_{t h}$ domain-slot pair at the $t_{t h}$ turn is calculated as:  \n\n$$\n\\begin{array}{r}{P_{t j}^{g a t e}=\\mathrm{softmax}(W_{g a t e}\\cdot\\left(r_{t j}^{\\mathrm{{CLS}}}\\right)^{\\top}+b_{g a t e}),}\\end{array}\n$$  \n\n![](images/image_2.jpg)  \nFigure 2: The architecture of our proposed DS-DST model. The left part is a fixed BERT model which acts as a feature extractor and outputs the representations of values in the candidate-value list for each categorical slot (marked in purple). The right part is the other fine-tuned BERT model which outputs representations for the concatenation of each domain-slot pair and the recent dialog context.  \n\nwhere $W_{g a t e}$ and $b_{g a t e}$ are learnable parameters and bias, respectively.  \n\nWe adopt the cross",
    "chunk_order_index": 2,
    "full_doc_id": "doc-10ea0afa395a52f98d2699434a2b05f1"
  },
  "chunk-66776e940011a1a6551ba1d5b182197d": {
    "tokens": 1200,
    "content": "model. The left part is a fixed BERT model which acts as a feature extractor and outputs the representations of values in the candidate-value list for each categorical slot (marked in purple). The right part is the other fine-tuned BERT model which outputs representations for the concatenation of each domain-slot pair and the recent dialog context.  \n\nwhere $W_{g a t e}$ and $b_{g a t e}$ are learnable parameters and bias, respectively.  \n\nWe adopt the cross-entropy loss function for the slot gate classification as follows:  \n\n$$\n\\mathcal{L}_{g a t e}=\\sum_{t=1}^{T}\\sum_{j=1}^{N}-\\log(P_{t j}^{g a t e}\\cdot(y_{t j}^{g a t e})^{\\top}),\n$$  \n\nwhere  tj ygate is the one-hot gate label for the jth domain-slot pair at the $t_{t h}$ turn.  \n\n# 3.3 Non-Categorical Slot-Value Prediction  \n\nFor each non-categorical slot, its value can be mapped to a span with start and end position in the dialog context, e.g., slot leave at in the taxi domain has spans $4:30\\mathrm{pm}$ in the context. We take token-level representations $[r_{t j}^{1},\\ldots,r_{t j}^{K}]$ of the dialog context as input, and apply a two-way linear mapping to get a start vector $\\alpha_{t j}^{s t a r t}$ and an end vector αtejn d:  \n\n$$\n\\left[\\alpha_{t j}^{s t a r t},\\alpha_{t j}^{e n d}\\right]=W_{s p a n}\\cdot\\left(\\left[r_{t j}^{1},...,r_{t j}^{K}\\right]\\right)^{\\top}+b_{s p a n},\n$$  \n\nwhere $W_{s p a n}$ and $b_{s p a n}$ are learnable parameters and bias, respectively.  \n\nThe probability of the $i_{t h}$ word being the start position of the span is computed as: ptsjta $p_{t j}^{s t a r t_{i}}\\,=$ e tαjstarttrjk , and the loss for the start position pre  \n\ndiction can be calculated as:  \n\n$$\n\\mathcal{L}_{s t a r t}=\\sum_{t=1}^{T}\\sum_{j=1}^{M}-\\log(P_{t j}^{s t a r t}\\cdot(y_{t j}^{s t a r t})^{\\top}),\n$$  \n\nwhere ytsjt $y_{t j}^{s t a r t}$ is the one-hot start position label for the $j_{t h}$ domain-slot pair at the $t_{t h}$ turn.  \n\nSimilarly, we can also get the loss $\\mathcal{L}_{e n d}$ for end positions prediction. Therefore, the total loss $\\mathcal{L}_{s p a n}$ for the non-categorical slot-value prediction is the summation of $\\mathcal{L}_{s t a r t}$ and $\\mathcal{L}_{e n d}$ .  \n\n# 3.4 Categorical Slot-Value Prediction  \n\nEach categorical slot has several candidate values; e.g., slot price range in the hotel domain has three values $\\{c h e a p,e x p e n s i v e,m o d e r a t e\\}$ . At the $t_{t h}$ turn, for the $j_{t h}$ domain-slot pair, we first use another pre-trained BERT to get the aggregated representation of each value in the candidate list:  \n\n$$\ny_{l}^{\\mathrm{CLS}}=\\mathrm{BERT}([\\mathrm{CLS}]\\oplus V_{l}\\oplus[\\mathrm{SEP}]),\n$$  \n\nwhere $l\\in\\{1,\\ldots,L\\}$ . Note that during the training process, this separate BERT model acts as a feature extractor and its model parameters are fixed.  \n\nWe calculate the relevance score between the aggregated representation and a reference candidate by the cosine similarity (Lin et al., 2017):  \n\n$$\nc o s(r_{t j}^{\\mathrm{CLS}},y_{l}^{\\mathrm{CLS}})=\\frac{r_{t j}^{\\mathrm{CLS}}\\cdot(y_{l}^{\\mathrm{CLS}})^{\\top}}{\\left\\|r_{t j}^{\\mathrm{CLS}}\\right\\|\\|y_{l}^{\\mathrm{CLS}}\\|},\n$$  \n\nDomain Hotel Train Restaurant Attraction Taxi   \n\n![](images/image_3.jpg)  \n\nTable 1: The dataset information of MultiWOZ 2.0 and MultiWOZ 2.1. The top two rows list 5 selected domains, consisting of 30 domain-slot pairs. The last three rows show the number of dialogues for each domain.  \n\nwhere $r_{t j}^{\\mathrm{CLS}}$ and $y_{l}^{\\mathrm{CLS}}$ are the aggregated representations from the slot-context encoder and the reference candidate value, respectively.  \n\nDuring the training process, we employ a hinge loss to enlarge the difference between the similarity of $r_{t j}^{\\mathrm{CLS}}$ to the target value and that to the most similar value in the candidate-value list:  \n\n$$\n\\begin{array}{r l r}{\\lefteqn{\\mathcal{L}_{p i c k l i s t}=\\sum_{t=1}^{T}\\sum_{j=1}^{N-M}\\operatorname*{max}(0,\\lambda-c o",
    "chunk_order_index": 3,
    "full_doc_id": "doc-10ea0afa395a52f98d2699434a2b05f1"
  },
  "chunk-4a88ef391418e2f5c8b39687aa4cd0cc": {
    "tokens": 1200,
    "content": "a hinge loss to enlarge the difference between the similarity of $r_{t j}^{\\mathrm{CLS}}$ to the target value and that to the most similar value in the candidate-value list:  \n\n$$\n\\begin{array}{r l r}{\\lefteqn{\\mathcal{L}_{p i c k l i s t}=\\sum_{t=1}^{T}\\sum_{j=1}^{N-M}\\operatorname*{max}(0,\\lambda-c o s(r_{t j}^{\\mathrm{CLS}},y_{t a r g e t}^{\\mathrm{CLS}})}}\\\\ &{}&{+\\operatorname*{max}_{y_{l}^{\\mathrm{CLS}}\\neq y_{t a r g e t}^{\\mathrm{CLS}}}c o s(r_{t j}^{\\mathrm{CLS}},y_{l}^{\\mathrm{CLS}})),\\qquad(8)}\\end{array}\n$$  \n\nwhere $\\lambda$ is a constant margin and $l\\in\\{1,\\ldots,L\\}$ ,and $\\mathcal{L}_{p i c k l i s t}$ only requires partial ontology for DSDST.  \n\n# 3.5 Training Objective  \n\nDuring training process, the above three modules can be jointly trained and share parameters of BERT. We optimize the summations of different losses as:  \n\n$$\n\\begin{array}{r}{\\mathcal{L}_{t o t a l}=\\mathcal{L}_{g a t e}+\\mathcal{L}_{s p a n}+\\mathcal{L}_{p i c k l i s t}.}\\end{array}\n$$  \n\nFor the slots that are not mentioned or the users can accept any values (i.e., slots $\\in\\{n o n e,d o n t c a r e\\})$ at each dialogue turn, $\\mathcal{L}_{s p a n}$ and $\\mathcal{L}_{p i c k l i s t}$ are set to 0 and only the slot-gate classification is optimized during the training process.  \n\n# 4 Experimental Setup  \n\n# 4.1 Datasets  \n\nWe use the MultiWOZ 2.0 (Budzianowski et al., 2018) dataset and the MultiWOZ 2.1 (Eric et al., 2019) dataset. MultiWOZ 2.0 is one of the largest multi-domain dialogue corpora with seven distinct domains and over 10, 000 dialogues. Compared with the original dataset, MultiWOZ 2.1 conducts dataset correction, including correcting dialog states, spelling errors, dialogue utterance corrections, and mis-annotations to reduce several substantial noises (more details can be found in Eric et al. (2019)).  \n\nAs hospital and police domains contain very few dialogues $(5\\%$ of total dialogues), and they only appear in the training dataset, we ignore them in our experiments, following Wu et al. (2019). We adopt only five domains (i.e., train, restaurant, hotel, taxi, attraction) and obtain totally 30 domainslot pairs in the experiments. Table 1 summarizes the domain-slot pairs and their corresponding statistics in MultiWOZ 2.0 and MultiWOZ 2.1. We follow the standard training/validation/test split strategy provided in the original datasets, and the data pre-processing script provided in Wu et al. (2019).  \n\nFor MultiWOZ 2.0 and 2.1, the candidate values for the categorical slots are derived based on the ground-truth values of each slot that appeared in the partial dataset ontology. Besides, Since there are no provided ground-truth start positions and end positions for non-categorical slots in the datasets, we find the spans trough string matching between the ground truth values and the values in the dialog contexts, and we treat the start and end positions of the span which appeared at the most recent dialog turn as the ground-truth start positions and end positions.  \n\n# 4.2 Models  \n\nWe make a comparison with several existing models  and introduce some of them as below:  \n\nSpanPtr (Xu and Hu, 2018). It applies a RNNbased pointer network to find text spans with start and end pointers for each domain-slot pair.  \n\nPtr-DST. It is a variant based on SpanPtr with the exception that some slots are categorical slots, following DS-DST.  \n\nDSTreader (Gao et al., 2019b). It models the DST from the perspective of machine reading comprehensions and applies a pre-trained BERT as initial word embeddings.  \n\nDSTQA (Zhou and Small, 2019). It applies a dynamically-evolving knowledge graph and generates question asking for the values of a domain-slot  \n\n![](images/image_4.jpg)  \nTable 2: Joint accuracy on the test sets of MultiWOZ 2.0 and 2.1. +: the models require a full ontology, and $\\star$ : the results are reported by Eric et al. (2019)  \n\npair.  \n\nTRADE (Wu et al., 2019). It contains a slot gate module for slots classification and a pointer generator for states generation.  \n\nCOMER (Ren et al., 2019). It applies BERT as contextualized word embeddings and first generates the slot sequences in the belief state, then generates the value sequences for each slot.  \n\nBERT-DST (Rastogi et al., 2020). It uses BERT to obtain schema element embeddings and encode system as well as user utterances for dialogue state tracking. Different from the original model, it incorporates a pointer-generator copying mechanism for non-categorical slots of the MultiWOZ datasets.  \n\nSST-2 (Chen et al.,",
    "chunk_order_index": 4,
    "full_doc_id": "doc-10ea0afa395a52f98d2699434a2b05f1"
  },
  "chunk-f62a8c110929832aa89c04f4579fcabf": {
    "tokens": 1200,
    "content": "ERT as contextualized word embeddings and first generates the slot sequences in the belief state, then generates the value sequences for each slot.  \n\nBERT-DST (Rastogi et al., 2020). It uses BERT to obtain schema element embeddings and encode system as well as user utterances for dialogue state tracking. Different from the original model, it incorporates a pointer-generator copying mechanism for non-categorical slots of the MultiWOZ datasets.  \n\nSST-2 (Chen et al., 2020). It uses the graph neural network to incorporate slot relations and model slot interactions.  \n\nFor our proposed methods, we design three variants:  \n\nDS-DST. It represents our proposed dual strategy model for DST, which can simultaneously handle the non-categorical slots as well as the categorical ones. Following heuristics from (Rastogi et al., 2020), time and number related slots are treated as non-categorical slots, resulting in five slot types across four domains (nine domain-slot pairs in total), and the rest slots are treated as categorical slots (See also in Table 4). We also conduct investigations to decide domain-slot types in the experiments.  \n\nDS-Span. Similar to Xu and Hu (2018); Gao et al. (2019b), it treats all domain-slot pairs as noncategorical slots, where corresponding values for each slot are extracted through text spans (string matching) with start and end positions in the dialog context.  \n\nDS-Picklist. Similar to (Lee et al., 2019; Chen et al., 2020), It assumes a full ontology is available and treats all domain-slot pairs as categorical slots, where corresponding values for each slot are found in the candidate-value list (picklist).  \n\n# 5 Experimental Results  \n\nWe evaluate all the models using the joint accuracy metric. At each turn, the joint accuracy is 1.0 if and only if all $<$ domain, slot, value $>$ triplets are predicted correctly, otherwise 0. The score is averaged across all the turns in the evaluation set.  \n\n# 5.1 Joint Accuracy  \n\nOverall performance Table 2 shows the results on the test sets of two datasets. We can see that our models achieve the top performance on MultiWOZ 2.0 and competitive performance on MultiWOZ 2.1. Among these state-of-the-art results, ours are less sensitive to the dataset differences.  \n\nComparing DS-Span and DS-DST, we can find that jointly using the non-categorical and categorical approaches is indeed helpful in multi-domain DST. When the model has access to the full ontology, DS-Picklist shows that our method could further improve the DST performance. Although DS-Picklist is higher than DS-DST, in real scenarios, it may be nontrivial to have access to the full ontology. In the paper, we jointly train the three modTable 3: Joint accuracy on the test sets of MultiWOZ 2.1. BERT-DST is the model used in MultiWOZ 2.1. BERT-DST-Picklist is the original model described in (Rastogi et al., 2020), where a full ontology is required and all the slots are treated as categorical slots,. ‘single turn’ and ‘whole dialog history’ represent the Bert utterance inputs are the current dialog turn and the whole dialog history, respectively.  \n\n![](images/image_5.jpg)  \n\nules in Section 3.5, we also conduct experiments for separately training the non-categorical slots and categorical slots. DS-DST drops by $1.90\\%$ on MultiWOZ 2.1, which shows the benefits of jointly training.  \n\nDetailed comparisons with BERT related methods Compared with those methods as shown in Table 2, we can observe that DS-Span, which employs the strength of BERT, outperforms SpanPtr by $10.91\\%$ , and it outperforms COMMER and DSTreader, which also use a pre-trained BERT model as dialog context embeddings and word embeddings, respectively. DS-DST outperforms BERT-DST, which separately encodes dialog context and domain-slot pairs based on BERT, by $7.81\\%$ on MultiWOZ 2.1. The above results shows the effectiveness of our model design based on BERT, where we enforce the strong interactions between dialog context and domain-slot pairs.  \n\nTo further investigate the differences and importance of strong interactions, we reproduce the original BERT-DST model described in (Rastogi et al., 2020). In addition, we compare with ToD-BERT (Wu et al., 2020), which is a large pre-trained model based on several task-oriented dialogue datasets, and it also separately encodes dialog context and domain-slot pairs. We show the results in Table 3. We observe that our model is consistently much better than BERT-DST and BERT-DST-Picklist. Moreover, our models based on BERT surpass the strong ToD-BERT. We conclude that our improvements come from the strong interactions between slots and dialog context. Therefore, it is important to Table 4: The slot-level accuracy on the test set of MultiWOZ 2.1. $\\cdot_{+/-},$ indicates absolute performance improvement/degradation compared with DS-Span. The numbers highlighted in bold indicate that the difference is significant $(p\\,<\\,0.05)$ , tested by bootstrap resampling (Noreen, 1989). The slots above the first dashed line are categorical slots and the slots below the first dashed line are non-categorical slots for DS-DST. The last row shows the average slot accuracy.  \n\n![](images/image_6.jpg)  \n\nemploy strong interactions to multi-domain DST tasks.  \n\n# 5.2 Per Slot",
    "chunk_order_index": 5,
    "full_doc_id": "doc-10ea0afa395a52f98d2699434a2b05f1"
  },
  "chunk-0674e6b156ddc1542ca4a1c858314e2e": {
    "tokens": 1200,
    "content": ". The numbers highlighted in bold indicate that the difference is significant $(p\\,<\\,0.05)$ , tested by bootstrap resampling (Noreen, 1989). The slots above the first dashed line are categorical slots and the slots below the first dashed line are non-categorical slots for DS-DST. The last row shows the average slot accuracy.  \n\n![](images/image_6.jpg)  \n\nemploy strong interactions to multi-domain DST tasks.  \n\n# 5.2 Per Slot Accuracy  \n\nNow that we have observed that DS-DST and DSPicklist perform much better than DS-Span, we focus on where the accuracy improvement comes from. Table 4 shows the accuracy for each slot type on the MultiWOZ 2.1 test set, and we can observe significant improvement over the DS-Span baseline for some slots, including hotel-type, attractiontype, attraction-name, hotel-internet and hotelparking. This is because their values usually have different expressions and cannot be extracted from the dialog context, which decreases the performance of the span-based methods. In contrast, their values can be predicted directly from the candidatevalue lists. Compared with other slots, these slots still have space for improvements.  \n\n![](images/image_7.jpg)  \nTable 5: Statistics of Top-10 slots on the MultiWOZ 2.1 validation set based on (#Unfound / #Relative_Turns). DS-DST and DS-Picklist show percentages based on (#Recover / #Unfound). #Unfound is the number of slots whose values cannot be found through span matching in the dialog context, #Relative_Turns is the number of dialogue turns where the slot type is mentioned, and #Recover indicates the number of values correctly predicted by DS-DST or DS-Picklist.  \n\n# 5.3 Analysis and Discussions  \n\nError analysis To better understand the improvement, we conducted an error analysis and inspected actual examples on the MultiWOZ 2.1 validation set. Table 5 shows the top-10 slots, according to the ratio of ground-truth slot values which cannot be found through span matching. That is, for such examples, DS-Span cannot extract the ground-truth strings, resulting in the low joint accuracy. Here, we show how well our DS-DST and DS-Picklist can correctly predict the missing values in DS-Span. As we can see in this table, the two methods dramatically reduce the errors for some slots such as attraction-type, hotel-internet and hotel-parking. Hence, for these kinds of slots, it is better to treat them as categorical slots. Among the top-10 slots, the time-related slots such as taxi-leave at and trainarrive by, which are span-based slots in DS-DST, DS-Span and DS-DST cannot perform well as there are no span matching in the dialogue context, and only few values (i.e., ‘none’ and ‘dontcare’) can be correctly predicted by the slot-gate classification. When the ontology is accessible, DS-Picklist can further reduce the error rates, since the predicted values can be found in the candidate-values lists.  \n\nOn the other hand, we also investigated slots whose ground-truth values can be found through span matching, and we did not observe a signifi- cant difference between the three methods. This means that both the non-categorical and categorical methods perform similarly when target values are explicitly mentioned in the dialogues. Therefore, when most of the slot values can be found directly in the dialog context, these slots can be treated as either non-categorical slots or categorical slots.  \n\nAs our model relies on the slot-gate classification in Section 3.2, we also investigate the potential influence of this module. We replace this module with an oracle slot-gate classification module, and the joint accuracy is improved from $55.23\\%$ to $86.10\\%$ on the development set of MultiWOZ 2.1, which indicates that there is a great space to improve the performance with better designs of the slot-gate classification module.  \n\nExamples Table 6 shows three examples of dialogue turns in the validation set. In the first example, we can see that DS-Span cannot correctly extract the ground-truth values, because the User does not always explicitly mention ‘yes’ or ‘no’ when being asked about the internet or parking requests. In the second example, the User and the System are talking about a swimming pool, but they just say ‘pool’ and its meaning can be inferred from the context. As a result, DS-Span can only extract ‘pool’ as a value, which is not sufficient. In the third example, all the predictions are semantically correct; however, in terms of the string match, only DS-Picklist can correctly predict the value. The two other methods rely on span extraction. This is caused by formatting issues; that is, it is not always guaranteed that strings in the context satisfy desired formats, such as time expressions. Based on our analysis, future work needs to consider more relevant evaluation metrics than the widely-used string matching metric. For example, in the QA research community, it is investigated how to more robustly evaluate QA models (Chen et al., 2019).  \n\n![](images/image_8.jpg)  \nTable 6: Predicted dialog states on the MultiWOZ 2.1 validation set, bold face means incorrect prediction. The first two examples show comparisons between DS-Span and DS-DST. The last example shows comparisons between DS-Span, DS-DST and DS-Picklist.  \n\nOpen discussions Multi-domain dialog state tracking is enjoying popularity in enhancing research on task-oriented dialog systems, to handle tasks across different domains and support a large number of services. However, it should be noted that there is much room for improvement with the popular MultiWOZ 2",
    "chunk_order_index": 6,
    "full_doc_id": "doc-10ea0afa395a52f98d2699434a2b05f1"
  },
  "chunk-9ea56e64633d44e846e55b17f2865108": {
    "tokens": 1200,
    "content": ".1 validation set, bold face means incorrect prediction. The first two examples show comparisons between DS-Span and DS-DST. The last example shows comparisons between DS-Span, DS-DST and DS-Picklist.  \n\nOpen discussions Multi-domain dialog state tracking is enjoying popularity in enhancing research on task-oriented dialog systems, to handle tasks across different domains and support a large number of services. However, it should be noted that there is much room for improvement with the popular MultiWOZ 2.0 (Budzianowski et al., 2018) and MultiWOZ 2.1 (Eric et al., 2019) datasets, due to their annotation errors, ambiguity, and inconsistency. Moreover, a potential problem is that no standard ways have been established for the evaluation of the MultiWOZ dataset. Some papers are following the pre-processing ways provided by $\\mathrm{Wu}$ et al. (2019), while others have their own ways, which may result in unfair comparisons; for example, there are some ‘none’ values in the test set, and an evaluation metric without considering them will lead to higher accuracy (up to $3\\%$ in our experience). Recent work has refined the datasets to form the latest MultiWOZ 2.2 dataset with higher quality and consistency (Zang et al., 2020). We encourage providing more details of the data processing in future work, and more importantly, testing models on the test set with the higher quality.  \n\n# 6 Conclusion  \n\nIn this paper, we have proposed a dual strategy model with strong interactions between the dialog context and domain-slot pairs for the task of multi-domain dialog state tracking. In particular, we predict the slot value via selecting over a partial ontology for categorical slots or finding values from the dialog context for non-categorical slots. Our models achieve the state of the art results on the MultiWOZ 2.0 and competitive results on the MultiWOZ 2.1. Moreover, we conduct a comprehensive analysis on the dataset to facilitate future research.  \n\n# Acknowledgments  \n\nThis work is supported in part by NSF under grants III-1763325, III-1909323, and SaTC-1930941. We thank Salesforce research members for their insightful discussions, and the anonymous reviewers for their helpful and valuable comments.  \n\n# References  \n\nAkari Asai, Kazuma Hashimoto, Hannaneh Hajishirzi, Richard Socher, and Caiming Xiong. 2019. Learning to retrieve reasoning paths over wikipedia graph for question answering. arXiv preprint arXiv:1911.10470.   \nPaweł Budzianowski, Tsung-Hsien Wen, Bo-Hsiang Tseng, Inigo Casanueva, Stefan Ultes, Osman Ramadan, and Milica Gašic´. 2018. Multiwoz-a largescale multi-domain wizard-of-oz dataset for taskoriented dialogue modelling. In EMNLP.   \nAnthony Chen, Gabriel Stanovsky, Sameer Singh, and Matt Gardner. 2019. Evaluating question answering evaluation. In Proceedings of the 2nd Workshop on Machine Reading for Question Answering.   \nLu Chen, Boer Lv, Chi Wang, Su Zhu, Bowen Tan, and Kai Yu. 2020. Schema-guided multi-domain dialogue state tracking with graph attention neural networks. In AAAI, pages 7521–7528.   \nJacob Devlin, Ming-Wei Chang, Kenton Lee, and Kristina Toutanova. 2019. Bert: Pre-training of deep bidirectional transformers for language understanding. In NAACL.   \nMihail Eric, Rahul Goel, Shachi Paul, Abhishek Sethi, Sanchit Agarwal, Shuyag Gao, and Dilek HakkaniTur. 2019. Multiwoz 2.1: Multi-domain dialogue state corrections and state tracking baselines. arXiv preprint arXiv:1907.01669.   \nJianfeng Gao, Michel Galley, Lihong Li, et al. 2019a. Neural approaches to conversational ai. Foundations and Trends $\\textsuperscript{\\textregistered}$ in Information Retrieval, 13(2- 3):127–298.   \nShuyang Gao, Abhishek Sethi, Sanchit Aggarwal, Tagyoung Chung, and Dilek Hakkani-Tur. 2019b. Dialog state tracking: A neural reading comprehension approach. In SIGDIAL.   \nMatthew Henderson, Blaise Thomson, and Jason D Williams. 2014a. The second dialog state tracking challenge. In SIGDIAL.   \nMatthew Henderson, Blaise Thomson, and Jason D Williams. 2014b. The third dialog state tracking challenge. In IEEE SLT.   \nMatthew Henderson, Blaise Thomson, and Steve Young. 2014c. Word-based dialog state tracking with recurrent neural networks. In SIGDIAL.   \nSeokhwan Kim, Luis Fernando D’Haro, Rafael E Banchs, Jason D Williams, Matthew Henderson, and Koichiro Yoshino. 2016. The fifth dialog state tracking challenge. In 2016 IEEE Spoken Language Technology Workshop (SLT), pages 511–517. IEEE.   \nSeokhwan Kim, Luis Fernando D’Haro, Rafael E Banchs, Jason D Williams, and Matthew Henderson. 2017. The fourth dialog state tracking challenge. In Dialogues with Social Robots, pages 435– 449. Springer.   \nSeokhwan Kim, Michel Galley, Chulaka Gunasekara, Sungjin Lee, Adam Atkinson, Baolin Peng, Hannes Schulz, Jianfeng Gao, Jinchao Li, Mahmoud Adada, et al. 2019.",
    "chunk_order_index": 7,
    "full_doc_id": "doc-10ea0afa395a52f98d2699434a2b05f1"
  },
  "chunk-e584b0ec5e814f387a8facb9f9a9c502": {
    "tokens": 1200,
    "content": "’Haro, Rafael E Banchs, Jason D Williams, and Matthew Henderson. 2017. The fourth dialog state tracking challenge. In Dialogues with Social Robots, pages 435– 449. Springer.   \nSeokhwan Kim, Michel Galley, Chulaka Gunasekara, Sungjin Lee, Adam Atkinson, Baolin Peng, Hannes Schulz, Jianfeng Gao, Jinchao Li, Mahmoud Adada, et al. 2019. The eighth dialog system technology challenge. arXiv preprint arXiv:1911.06394.   \nAdarsh Kumar, Peter Ku, Anuj Kumar Goyal, Angeliki Metallinou, and Dilek Hakkani-Tur. 2020. Ma-dst: Multi-attention based scalable dialog state tracking. AAAI.   \nHung Le, Richard Socher, and Steven CH Hoi. 2020. Non-autoregressive dialog state tracking. ICLR.   \nHwaran Lee, Jinsik Lee, and Tae-Yoon Kim. 2019. Sumbt: Slot-utterance matching for universal and scalable belief tracking. In ACL.   \nWenqiang Lei, Xisen Jin, Min-Yen Kan, Zhaochun Ren, Xiangnan He, and Dawei Yin. 2018. Sequicity: Simplifying task-oriented dialogue systems with single sequence-to-sequence architectures. In ACL.   \nKevin Lin, Dianqi Li, Xiaodong He, Zhengyou Zhang, and Ming-Ting Sun. 2017. Adversarial ranking for language generation. In NIPS.   \nBing Liu and Ian Lane. 2017. An end-to-end trainable neural network model with belief tracking for taskoriented dialog. In INTERSPEECH.   \nEric W. Noreen. 1989. Computer-Intensive Methods for Testing Hypotheses: An Introduction. WileyInterscience.   \nLin Qiu, Yunxuan Xiao, Yanru Qu, Hao Zhou, Lei Li, Weinan Zhang, and Yong Yu. 2019. Dynamically fused graph network for multi-hop reasoning. In ACL.   \nAlec Radford, Karthik Narasimhan, Tim Salimans, and Ilya Sutskever. 2018. Improving language understanding by generative pre-training.   \nOsman Ramadan, Paweł Budzianowski, and Milica Gašic´. 2018. Large-scale multi-domain belief tracking with knowledge sharing. In ACL.   \nAbhinav Rastogi, Xiaoxue Zang, Srinivas Sunkara, Raghav Gupta, and Pranav Khaitan. 2020. Towards scalable multi-domain conversational agents: The schema-guided dialogue dataset. AAAI.   \nLiliang Ren, Jianmo Ni, and Julian McAuley. 2019. Scalable and accurate dialogue state tracking via hierarchical sequence generation. EMNLP.   \nYong Shan, Zekang Li, Jinchao Zhang, Fandong Meng, Yang Feng, Cheng Niu, and Jie Zhou. 2020. A contextual hierarchical attention network with adaptive objective for dialogue state tracking. arXiv preprint arXiv:2006.01554.   \nTsung-Hsien Wen, David Vandyke, Nikola Mrksic, Milica Gasic, Lina M Rojas-Barahona, Pei-Hao Su, Stefan Ultes, and Steve Young. 2016. A networkbased end-to-end trainable task-oriented dialogue system. In EACL.   \nJason Williams, Antoine Raux, Deepak Ramachandran, and Alan Black. 2013. The dialog state tracking challenge. In SIGDIAL.   \nChien-Sheng Wu, Steven Hoi, Richard Socher, and Caiming Xiong. 2020. Tod-bert: Pre-trained natural language understanding for task-oriented dialogues. arXiv preprint arXiv:2004.06871.   \nChien-Sheng Wu, Andrea Madotto, Ehsan HosseiniAsl, Caiming Xiong, Richard Socher, and Pascale Fung. 2019. Transferable multi-domain state generator for task-oriented dialogue systems. In ACL.   \nPuyang Xu and Qi Hu. 2018. An end-to-end approach for handling unknown slot values in dialogue state tracking. In ACL.   \nSteve Young, Milica Gašic´, Blaise Thomson, and Jason D Williams. 2013. Pomdp-based statistical spoken dialog systems: A review. Proceedings of the IEEE, 101(5):1160–1179.   \nXiaoxue Zang, Abhinav Rastogi, Srinivas Sunkara, Raghav Gupta, Jianguo Zhang, and Jindong Chen. 2020. Multiwoz 2.2: A dialogue dataset with additional annotation corrections and state tracking baselines. arXiv preprint arXiv:2007.12720.   \nVictor Zhong, Caiming Xiong, and Richard Socher. 2018. Global-locally self-attentive encoder for dialogue state tracking. In ACL.   \nLi Zhou and Kevin Small. 2019. Multi-domain dialogue state tracking as dynamic knowledge graph enhanced question answering. arXiv preprint arXiv:1911.06192.  \n\n# A Appendix  \n\n# A.1 Training Details  \n\nWe employ a pre-trained BERT model with the “bert-base-uncased” configuration.4 During the fine-tuning process, we update all the model parameters using the BertAdam (Devlin et al., 2019) optimizer. The maximum input sequence length after WordPiece tokenization for BERT is set to 512. The constant margin",
    "chunk_order_index": 8,
    "full_doc_id": "doc-10ea0afa395a52f98d2699434a2b05f1"
  },
  "chunk-b7e67152e09814a094103db45b53d4c0": {
    "tokens": 429,
    "content": "answering. arXiv preprint arXiv:1911.06192.  \n\n# A Appendix  \n\n# A.1 Training Details  \n\nWe employ a pre-trained BERT model with the “bert-base-uncased” configuration.4 During the fine-tuning process, we update all the model parameters using the BertAdam (Devlin et al., 2019) optimizer. The maximum input sequence length after WordPiece tokenization for BERT is set to 512. The constant margin $\\lambda$ is set to 0.5 for the DS-DST and DS-Picklist models. For the MultiWOZ 2.0 and MultiWOZ 2.1 datasets, the initial learning rate is set to $1e-4$ , and the proportion for learning rate warmup is set to 0.1. The batch size is set to 16. We follow the learning rate decay mechanism as in (Lee et al., 2019), and we set the maximum number of the training epochs to 5. We check the joint accuracy on the validation set after every 1,000 iterations, and keep the best checkpoint to be used for the final evaluation on the test set.  \n\n# A.2 Sample Output  \n\nWe present outputs of DS-Span and DS-DST in all the turns for two dialogues (i.e., MUL0729, PMUL2428) on the validation set of the MultiWOZ 2.1. Table 7 and Table 8 show the predicted dialog states for MUL0729 and PMUL2428, respectively. In Table 7, hotel type and hotel internet are predicted incorrectly by DS-Span, where the value yes of hotel internet has a different description free wifi in the dialog context. For this type of values, DSSpan cannot find the spans directly in the dialog context. In Table 8, DS-Span does not correctly predict the state <taxi, departure, funky fun house> at the $6_{t h}$ turn.  \n\n![](images/image_9.jpg)  \n\n![](images/image_10.jpg)",
    "chunk_order_index": 9,
    "full_doc_id": "doc-10ea0afa395a52f98d2699434a2b05f1"
  }
}