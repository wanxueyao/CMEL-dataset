{
  "chunk-33bc2391dc7cec689415c9b2ca0047cf": {
    "tokens": 1200,
    "content": "# Dialogue Learning with Human Teaching and Feedback in End-to-End Trainable Task-Oriented Dialogue Systems  \n\nBing Liu1,∗ Gokhan T¨ur2, Dilek Hakkani-T¨ur2, Pararth Shah2, Larry Heck3† 1Carnegie Mellon University, Pittsburgh, PA, USA  \n\n2Google Research, Mountain View, CA,USA 3Samsung Research, Mountain View, CA, USA liubing@cmu.edu, dilekh,pararth@google.com, {gokhan.tur,larry.heck}@ieee.org  \n\n# Abstract  \n\nIn this work, we present a hybrid learning method for training task-oriented dialogue systems through online user interactions. Popular methods for learning task-oriented dialogues include applying reinforcement learning with user feedback on supervised pretraining models. Efficiency of such learning method may suffer from the mismatch of dialogue state distribution between offline training and online interactive learning stages. To address this challenge, we propose a hybrid imitation and reinforcement learning method, with which a dialogue agent can effectively learn from its interaction with users by learning from human teaching and feedback. We design a neural network based task-oriented dialogue agent that can be optimized end-toend with the proposed learning method. Experimental results show that our end-to-end dialogue agent can learn effectively from the mistake it makes via imitation learning from user teaching. Applying reinforcement learning with user feedback after the imitation learning stage further improves the agent’s capability in successfully completing a task.  \n\n# 1 Introduction  \n\nTask-oriented dialogue systems assist users to complete tasks in specific domains by understanding user’s request and aggregate useful information from external resources within several dialogue turns. Conventional task-oriented dialogue systems have a complex pipeline (Rudnicky et al., 1999; Raux et al., 2005; Young et al., 2013) consisting of independently developed and modularly connected components for natural language understanding (NLU) (Mesnil et al., 2015; Liu and Lane, 2016; Hakkani-Tu¨r et al., 2016), dialogue state tracking (DST) (Henderson et al., 2014c;  \n\nMrkˇsic´ et al., 2016), and dialogue policy learning (Gasic and Young, 2014; Shah et al., 2016; Su et al., 2016, 2017). These system components are usually trained independently, and their optimization targets may not fully align with the overall system evaluation criteria (e.g. task success rate and user satisfaction). Moreover, errors made in the upper stream modules of the pipeline propagate to downstream components and get amplified, making it hard to track the source of errors.  \n\nTo address these limitations with the conventional task-oriented dialogue systems, recent efforts have been made in designing endto-end learning solutions with neural network based methods. Both supervised learning (SL) based (Wen et al., 2017; Bordes and Weston, 2017; Liu and Lane, 2017a) and deep reinforcement learning (RL) based systems (Zhao and Eskenazi, 2016; Li et al., 2017; Peng et al., 2017) have been studied in the literature. Comparing to chit-chat dialogue models that are usually trained offline using single-turn context-response pairs, task-oriented dialogue model involves reasoning and planning over multiple dialogue turns. This makes it especially important for a system to be able to learn from users in an interactive manner. Comparing to SL models, systems trained with RL by receiving feedback during users interactions showed improved model robustness against diverse dialogue scenarios (Williams and Zweig, 2016; Liu and Lane, 2017b).  \n\nA critical step in learning RL based taskoriented dialogue models is dialogue policy learning. Training dialogue policy online from scratch typically requires a large number of interactive learning sessions before an agent can reach a satisfactory performance level. Recent works (Henderson et al., 2008; Williams et al., 2017; Liu et al., 2017) explored pre-training the dialogue model using human-human or human-machine dialogue corpora before performing interactive learning with RL to address this concern. A potential drawback with such pre-training approach is that the model may suffer from the mismatch of dialogue state distributions between supervised training and interactive learning stages. While interacting with users, the agent’s response at each turn has a direct influence on the distribution of dialogue state that the agent will operate on in the upcoming dialogue turns. If the agent makes a small mistake and reaches an unfamiliar state, it may not know how to recover from it and get back to a normal dialogue trajectory. This is because such recovery situation may be rare for good human agents and thus are not well covered in the supervised training corpus. This will result in compounding errors in a dialogue which may lead to failure of a task. RL exploration might finally help to find corresponding actions to recover from a bad state, but the search process can be very inefficient.  \n\nTo ameliorate the effect of dialogue state distribution mismatch between offline training and RL interactive learning, we propose a hybrid imitation and reinforcement learning method. We first let the agent to interact with users using its own policy learned from supervised pre-training. When an agent makes a mistake, we ask users to correct the mistake by demonstrating the agent the right actions to take at each turn. This user corrected dialogue sample, which is guided by the agent’s own policy, is then added to the existing training corpus. We fine-tune the dialogue policy with this dialogue sample aggregation (Ross et al., 2011) and continue such user teaching process for a number of cycles. Since asking for user teaching at each dialogue turn is costly, we want to reduce this user teaching cycles as much as possible and continue the learning process with RL by collecting simple forms of user feedback (e.g. a binary feedback, positive or negative) only at the end",
    "chunk_order_index": 0,
    "full_doc_id": "doc-56023876aad527eb1f7c4a37dacd7576"
  },
  "chunk-1d2f35e2fb54d18ba1dd54dabca8b6d3": {
    "tokens": 1200,
    "content": "’s own policy, is then added to the existing training corpus. We fine-tune the dialogue policy with this dialogue sample aggregation (Ross et al., 2011) and continue such user teaching process for a number of cycles. Since asking for user teaching at each dialogue turn is costly, we want to reduce this user teaching cycles as much as possible and continue the learning process with RL by collecting simple forms of user feedback (e.g. a binary feedback, positive or negative) only at the end of a dialogue. Our main contributions in this work are:  \n\nWe design a neural network based taskoriented dialogue system which can be optimized end-to-end for natural language understanding, dialogue state tracking, and dialogue policy learning.  \n\nWe propose a hybrid imitation and reinforcement learning method for end-to-end model training in addressing the challenge with dialogue state distribution mismatch between offline training and interactive learning.  \n\nThe remainder of the paper is organized as follows. In section 2, we discuss related work in building end-to-end task-oriented dialogue systems. In section 3, we describe the proposed model and learning method in detail. In Section 4, we describe the experiment setup and discuss the results. Section 5 gives the conclusions.  \n\n# 2 Related Work  \n\nPopular approaches in learning task-oriented dialogue include modeling the task as a partially observable Markov Decision Process (POMDP) (Young et al., 2013). RL can be applied in the POMDP framework to learn dialogue policy online by interacting with users (Gaˇsi´c et al., 2013). The dialogue state and system action space have to be carefully designed in order to make the policy learning tractable (Young et al., 2013), which limits the model’s usage to restricted domains.  \n\nRecent efforts have been made in designing end-to-end solutions for task-oriented dialogues, inspired by the success of encoder-decoder based neural network models in non-task-oriented conversational systems (Serban et al., 2015; Li et al., 2016). Wen et al. (Wen et al., 2017) designed an end-to-end trainable neural dialogue model with modularly connected system components. This system is a supervised learning model which is evaluated on fixed dialogue corpora. It is unknown how well the model performance generalizes to unseen dialogue state during user interactions. Our system is trained by a combination of supervised and deep RL methods, as it is shown that RL may effectively improve dialogue success rate by exploring a large dialogue action space (Henderson et al., 2008; Li et al., 2017).  \n\nBordes and Weston (2017) proposed a taskoriented dialogue model using end-to-end memory networks. In the same line of research, people explored using query-regression networks (Seo et al., 2016), gated memory networks (Liu and Perez, 2017), and copy-augmented networks (Eric and Manning, 2017) to learn the dialogue state. These systems directly select a final response from a list of response candidates conditioning on the dialogue history without doing slot filling or user goal tracking. Our model, on the other hand, explicitly tracks user’s goal for effective integration with knowledge bases (KBs). Robust dialogue state tracking has been shown (Jurcˇı´ˇcek et al., 2012) to be critical in improving dialogue success in task completion.  \n\nDhingra et al. (2017) proposed an end-to-end RL dialogue agent for information access. Their model focuses on bringing differentiability to the KB query operation by introducing a “soft” retrieval process in selecting the KB entries. Such soft-KB lookup is prone to entity updates and additions in the KB, which is common in real world information systems. In our model, we use symbolic queries and leave the selection of KB entities to external services (e.g. a recommender system), as entity ranking in real world systems can be made with much richer features (e.g. user profiles, location and time context, etc.). Quality of the generated symbolic query is directly related to the belief tracking performance. In our proposed end-to-end system, belief tracking can be optimized together with other system components (e.g. language understanding and policy) during interactive learning with users.  \n\nWilliams et al. (2017) proposed a hybrid code network for task-oriented dialogue that can be trained with supervised and reinforcement learning. They show that RL performed with a supervised pre-training model using labeled dialogues improves learning speed dramatically. They did not discuss the potential issue of dialogue state distribution mismatch between supervised pretraining and RL interactive learning, which is addressed in our dialogue learning framework.  \n\n# 3 Proposed Method  \n\nFigure 1 shows the overall system architecture of the proposed end-to-end task-oriented dialogue model. We use a hierarchical LSTM neural network to encode a dialogue with a sequence of turns. User input to the system in natural language format is encoded to a continuous vector via a bidirectional LSTM utterance encoder. This user utterance encoding, together with the encoding of the previous system action, serves as the input to a dialogue-level LSTM. State of this dialogue-level LSTM maintains a continuous representation of the dialogue state. Based on this state, the model generates a probability distribution over candidate values for each of the tracked goal slots. A query command can then be formulated with the state tracking outputs and issued to a knowledge base to retrieve requested information. Finally, the system produces a dialogue action, which is conditioned on information from the dialogue state, the estimated user’s goal, and the encoding of the query results . This dialogue action, together with the user goal tracking results and the query results, is used to generate the final natural language system response via a natural language generator (NLG). We describe each core model component in detail in the following sections.  \n\n# 3.1 Utterance Encoding  \n\nWe use a",
    "chunk_order_index": 1,
    "full_doc_id": "doc-56023876aad527eb1f7c4a37dacd7576"
  },
  "chunk-de4707ebd56153a05119e590392c169a": {
    "tokens": 1200,
    "content": "to retrieve requested information. Finally, the system produces a dialogue action, which is conditioned on information from the dialogue state, the estimated user’s goal, and the encoding of the query results . This dialogue action, together with the user goal tracking results and the query results, is used to generate the final natural language system response via a natural language generator (NLG). We describe each core model component in detail in the following sections.  \n\n# 3.1 Utterance Encoding  \n\nWe use a bidirectional LSTM to encode the user utterance to a continuous representation. We refer to this LSTM as the utterance-level LSTM. The user utterance vector is generated by concatenating the last forward and backward LSTM states. Let $\\mathbf{U}_{k}=(w_{1},w_{2},...,w_{T_{k}})$ be the user utterance at turn $k$ with $T_{k}$ words. These words are firstly mapped to an embedding space, and further serve as the step inputs to the bidirectional LSTM. Let $\\vec{h_{t}}^{\\prime}$ and $\\overleftarrow{\\ h_{t}}$ represent the forward and backward LSTM state outputs at time step $t$ . The user utterance vector $U_{k}$ is produced by: $U_{k}=[\\overrightarrow{h_{T_{k}}},\\overleftarrow{h_{1}}]$ ,where $\\overrightarrow{h_{T_{k}}}$ and $\\scriptstyle{\\overleftarrow{h_{1}}}$ are the last states in the forward and backward LSTMs.  \n\n# 3.2 Dialogue State Tracking  \n\nDialogue state tracking, or belief tracking, maintains the state of a conversation, such as user’s goals, by accumulating evidence along the sequence of dialogue turns. Our model maintains the dialogue state in a continuous form in the dialogue-level LSTM $\\mathrm{(LSTM_{D})}$ ) state $s_{k}$ .$s_{k}$ is updated after the model processes each dialogue turn by taking in the encoding of user utterance $U_{k}$ and the encoding of the previous turn system output $A_{k-1}$ . This dialogue state serves as the input to the dialogue state tracker. The tracker updates its estimation of the user’s goal represented by a list of slot-value pairs. A probability distribution $P(l_{k}^{m})$ is maintained over candidate values for each goal slot type $m\\in M$ :  \n\n$$\n\\begin{array}{r l}&{s_{k}=\\mathrm{LSTM}_{\\mathrm{D}}(s_{k-1},\\:[U_{k},\\:A_{k-1}])}\\\\ &{P(l_{k}^{m}\\mid\\mathbf{U}_{\\leq k},\\:\\mathbf{A}_{<k})=\\mathrm{SlotDist}_{m}(s_{k})}\\end{array}\n$$  \n\nwhere $\\mathrm{SlotDist}_{m}$ is a single hidden layer MLP with softmax activation over slot type $m\\in M$ .  \n\n# 3.3 KB Operation  \n\nThe dialogue state tracking outputs are used to form an API call command to retrieve information from a knowledge base. The API call command is produced by replacing the tokens in a query command template with the best hypothesis for each goal slot from the dialogue state tracking output. Alternatively, an n-best list of API calls can be generated with the most probable candidate values for the tracked goal slots. In interfacing with KBs, instead of using a soft KB lookup as in (Dhingra et al., 2017), our model sends symbolic queries to the KB and leaves the ranking of the KB entities to an external recommender system. Entity ranking in real world systems can be made with much richer features (e.g. user profiles, local context, etc.) in the back-end system other than just following entity posterior probabilities conditioning on a user utterance. Hence ranking of the KB entities is not a part of our proposed neural dialogue model. In this work, we assume that the model receives a ranked list of KB entities according to the issued query and other available sources, such as user models.  \n\n![](images/image_1.jpg)  \nFigure 1: Proposed end-to-end task-oriented dialogue system architecture.  \n\nOnce the KB query results are returned, we save the retrieved entities to a queue and encode the result summary to a vector. Rather then encoding the real KB entity values as in (Bordes and Weston, 2017; Eric and Manning, 2017), we only encode a summary of the query results (i.e. item availability and number of matched items). This encoding serves as a part of the input to the policy network.  \n\n# 3.4 Dialogue Policy  \n\nA dialogue policy selects the next system action in response to the user’s input based on the current dialogue state. We use a deep neural network to model the dialogue policy. There are three inputs to the policy network, (1) the dialogue-level LSTM state $s_{k}$ , (2) the log probabilities of candidate values from the belief tracker $v_{k}$ , and (3) the encoding of the query results summary $E_{k}$ . The policy network emits a system action in the form of a dialogue act conditioning on these inputs:  \n\n![](images/image_2.jpg)  \nFigure 2: Dialogue state and policy network.  \n\n$$\nP(a_{k}\\mid U_{\\leq k},~A_{<k},~E_{\\leq k})=\\mathrm{PolicyNet}(s_{k},v_{k},E_{k})\n$$  \n\nwhere $v_{k}$ represents the concatenated log probabilities of candidate values for each goal slot, $E_{k}$ is the",
    "chunk_order_index": 2,
    "full_doc_id": "doc-56023876aad527eb1f7c4a37dacd7576"
  },
  "chunk-d6c65d0515df0ea73d7ffb985d859103": {
    "tokens": 1200,
    "content": "conditioning on these inputs:  \n\n![](images/image_2.jpg)  \nFigure 2: Dialogue state and policy network.  \n\n$$\nP(a_{k}\\mid U_{\\leq k},~A_{<k},~E_{\\leq k})=\\mathrm{PolicyNet}(s_{k},v_{k},E_{k})\n$$  \n\nwhere $v_{k}$ represents the concatenated log probabilities of candidate values for each goal slot, $E_{k}$ is the encoding of query results, and PolicyNet is a single hidden layer MLP with softmax activation function over all system actions.  \n\nThe emitted system action is finally used to produce a system response in natural language format by combining the state tracker outputs and the retrieved KB entities. We use a template based NLG in this work. The delexicalised tokens in the NLG template are replaced by the values from either the estimated user goal values or the KB entities, depending on the emitted system action.  \n\n# 3.5 Supervised Pre-training  \n\nBy connecting all the system components, we have an end-to-end model for task-oriented dialogue. Each system component is a neural network that takes in underlying system component’s outputs in a continuous form that is fully differentiable, and the entire system (utterance encoding, dialogue state tracking, and policy network) can be trained end-to-end.  \n\nWe first train the system in a supervised manner by fitting task-oriented dialogue samples. The model predicts the true user goal slot values and the next system action at each turn of a dialogue. We optimize the model parameter set $\\theta$ by minimizing a linear interpolation of cross-entropy losses for dialogue state tracking and system action prediction:  \n\n$$\n\\begin{array}{r l r}{\\lefteqn{\\operatorname*{min}_{\\theta}\\sum_{k=1}^{K}-\\Big[\\sum_{m=1}^{M}\\lambda_{l^{m}}\\log P(l_{k}^{m*}|\\mathbf{U}_{\\le k},\\mathbf{A}_{<k},\\mathbf{E}_{<k};\\theta)}}\\\\ &{}&{+\\lambda_{a}\\log P(a_{k}^{*}|\\mathbf{U}_{\\le k},\\mathbf{A}_{<k},\\mathbf{E}_{\\le k};\\theta)\\Big]}\\end{array}\n$$  \n\nwhere $\\lambda s$ are the linear interpolation weights for the cost of each system output. $l_{k}^{m*}$ is the ground truth label for the tracked user goal slot type $m\\in$ $M$ at the $k$ th turn, and $a_{k}^{*}$ is the true system action in the corpus.  \n\n# 3.6 Imitation Learning with Human Teaching  \n\nOnce obtaining a supervised training dialogue agent, we further let the agent to learn interactively from users by conducting task-oriented dialogues. Supervised learning succeeds when training and test data distributions match. During the agent’s interaction with users, any mistake made by the agent or any deviation in the user’s behavior may lead to a different dialogue state distribution than the one that the supervised learning agent saw during offline training. A small mistake made by the agent due to this covariate shift (Ross and Bagnell, 2010; Ross et al., 2011) may lead to compounding errors which finally lead to failure of a task. To address this issue, we propose a dialogue imitation learning method which allows the dialogue agent to learn from human teaching. We let the supervised training agent to interact with users using its learned dialogue policy $\\pi_{\\theta}(a|s)$ . With this, we collect additional dialogue samples that are guided by the agent’s own policy, rather than by the expert policy as those in the supervised training corpora. When the agent make mistakes, we ask users to correct the mistakes and demonstrate the expected actions and predictions for the agent to make. Such user teaching precisely addresses Algorithm 1 Dialogue Learning with Human Teaching and Feedback  \n\n1: Train model end-to-end on dialogue samples $D$ with MLE and obtain policy $\\pi_{\\theta}(a|s)\\,\\triangleright\\mathrm{eq}\\,4$   \n2: for learning iteration $k=1:K$ do   \n3: Run $\\pi_{\\theta}(a|s)$ with user to collect new dialogue samples $D_{\\pi}$   \n4: Ask user to correct the mistakes in the tracked user’s goal for each dialogue turn in $D_{\\pi}$   \n5: Add the newly labeled dialogue samples to the existing corpora: $D\\leftarrow D\\cup D_{\\pi}$   \n6: Train model end-to-end on $D$ and obtain an updated policy $\\pi_{\\theta}(a|s)$ $\\mathsf{D}\\,\\mathsf{e q}\\,4$   \n7: end for   \n8: for learning iteration $k=1:N$ do   \n9: Run $\\pi_{\\theta}(a|s)$ with user for a new dialogue   \n10: Collect user feedback as reward $r$   \n11: Update model end-to-end and obtain an updated policy $\\pi_{\\theta}(a|s)$ ▷eq 5  \n\n# 12: end for  \n\nthe limitations of the currently learned dialogue model, as these newly collected dialogue samples are driven by the agent’s own policy. Specifically, in this study we let an expert user to correct the mistake made by the agent in tracking the user’s goal at the end of each dialogue turn. This new batch of annotated dialogues are then added to the existing training corpus. We start the next round of supervised model training on this aggregated corpus to obtain an updated dialogue policy, and continue this dialogue imitation learning cycles.  \n\n# 3.7 Reinforcement Learning with Human Feedback  \n\nLearning from human teaching can be costly",
    "chunk_order_index": 3,
    "full_doc_id": "doc-56023876aad527eb1f7c4a37dacd7576"
  },
  "chunk-b88c4ba882c603a1862ab30706435a86": {
    "tokens": 1200,
    "content": "agent’s own policy. Specifically, in this study we let an expert user to correct the mistake made by the agent in tracking the user’s goal at the end of each dialogue turn. This new batch of annotated dialogues are then added to the existing training corpus. We start the next round of supervised model training on this aggregated corpus to obtain an updated dialogue policy, and continue this dialogue imitation learning cycles.  \n\n# 3.7 Reinforcement Learning with Human Feedback  \n\nLearning from human teaching can be costly, as it requires expert users to provide corrections at each dialogue turn. We want to minimize the number of such imitation dialogue learning cycles and continue to improve the agent via a form of supervision signal that is easier to obtain. After the imitation learning stage, we further optimize the neural dialogue system with RL by letting the agent to interact with users and learn from user feedback. Different from the turn-level corrections in the imitation dialogue learning stage, the feedback is only collected at the end of a dialogue. A positive reward is collected for successful tasks, and a zero reward is collected for failed tasks. A step penalty is applied to each dialogue turn to encourage the agent to complete the task in fewer steps. In this work, we only use task-completion as the metric in designing the dialogue reward. One can extend it by introducing additional factors to the reward functions, such as naturalness of interactions or costs associated with KB queries.  \n\nTo encourage the agent to explore the dialogue action space, we let the agent to follow a softmax policy during RL training by sampling system actions from the policy network outputs. We apply REINFORCE algorithm (Williams, 1992) in optimizing the network parameters. The objective function can be written as $J_{k}(\\theta)\\ =\\ \\mathbb{E}_{\\theta}\\left[R_{k}\\right]\\ =$ $\\mathbb{E}_{\\theta}\\left[\\sum_{t=0}^{K-k}\\gamma^{t}r_{k+t}\\right]$ t=−0 γrk+ti, with γ ∈[0, 1) being the discount factor. With likelihood ratio gradient estimator, the gradient of the objective function can be derived as:  \n\n$$\n\\begin{array}{r l}{\\lefteqn{\\nabla_{\\theta}J_{k}(\\theta)=\\nabla_{\\theta}\\mathbb{E}_{\\theta}\\left[R_{k}\\right]}}\\\\ &{=\\displaystyle\\sum_{a_{k}}\\pi_{\\theta}(a_{k}|s_{k})\\nabla_{\\theta}\\log\\pi_{\\theta}(a_{k}|s_{k})R_{k}}\\\\ &{=\\mathbb{E}_{\\theta}\\left[\\nabla_{\\theta}\\log\\pi_{\\theta}(a_{k}|s_{k})R_{k}\\right]}\\end{array}\n$$  \n\nThis last expression above gives us an unbiased gradient estimator.  \n\n# 4 Experiments  \n\n# 4.1 Datasets  \n\nWe evaluate the proposed method on DSTC2 (Henderson et al., 2014a) dataset in restaurant search domain and an internally collected dialogue corpus in movie booking domain. The movie booking dialogue corpus has an average number of 8.4 turns per dialogue. Its training set has 100K dialogues, and the development set and test set each has 10K dialogues.  \n\nThe movie booking dialogue corpus is generated (Shah et al., 2018) using a finite state machine based dialogue agent and an agenda based user simulator (Schatzmann et al., 2007) with natural language utterances rewritten by real users. The user simulator can be configured with different personalities, showing various levels of randomness and cooperativeness. This user simulator is also used to interact with our end-to-end training agent during imitation and reinforcement learning stages. We randomly select a user profile when conducting each dialogue simulation. During model evaluation, we use an extended set of natural language surface forms over the ones used during training time to evaluate the generalization capability of the proposed end-to-end model in handling diverse natural language inputs.  \n\n# 4.2 Training Settings  \n\nThe size of the dialogue-level and utterance-level LSTM state is set as 200 and 150 respectively. Word embedding size is 300. Embedding size for system action and slot values is set as 32. Hidden layer size of the policy network is set as 100. We use Adam optimization method (Kingma and Ba, 2014) with initial learning rate of 1e-3. Dropout rate of 0.5 is applied during supervised training to prevent the model from over-fitting.  \n\nIn imitation learning, we perform mini-batch model update after collecting every 25 dialogues. System actions are sampled from the learned policy to encourage exploration. The system action is defined with the act and slot types from a dialogue act (Henderson et al., 2013). For example, the dialogue act “ $'c o n f i r m(d a t e=m o n d a y)\"$ is mapped to a system action “confirm date” and a candidate value “monday” for slot type “date”. The slot types and values are from the dialogue state tracking output.  \n\nIn RL optimization, we update the model with every mini-batch of 25 samples. Dialogue is considered successful based on two conditions: (1) the goal slot values estimated from dialogue state tracking fully match to the user’s true goal values, and (2) the system is able to confirm with the user the tracked goal values and offer an entity which is finally accepted by the user. Maximum allowed number of dialogue turn is set as 15. A positive reward of $+15.0$ is given at the end of a successful dialogue, and a zero reward is given to a failed case. We",
    "chunk_order_index": 4,
    "full_doc_id": "doc-56023876aad527eb1f7c4a37dacd7576"
  },
  "chunk-2b703dd999933ff1b24acfd0a93e0d01": {
    "tokens": 1200,
    "content": "based on two conditions: (1) the goal slot values estimated from dialogue state tracking fully match to the user’s true goal values, and (2) the system is able to confirm with the user the tracked goal values and offer an entity which is finally accepted by the user. Maximum allowed number of dialogue turn is set as 15. A positive reward of $+15.0$ is given at the end of a successful dialogue, and a zero reward is given to a failed case. We apply a step penalty of -1.0 for each turn to encourage shorter dialogue for task completion.  \n\n# 4.3 Supervised Learning Results  \n\nTable 4.3 and Table 4.3 show the supervised learning model performance on DSTC2 and the movie booking corpus. Evaluation is made on DST accuracy. For the evaluation on DSTC2 corpus, we use the live ASR transcriptions as the user input utterances. Our proposed model achieves near state-ofthe-art dialogue state tracking results on DSTC2 corpus, on both individual slot tracking and joint slot tracking, comparing to the recent published results using RNN (Henderson et al., 2014b) and neural belief tracker (NBT) (Mrkˇsi´c et al., 2016). In the movie booking domain, our model also achieves promising performance on both individual slot tracking and joint slot tracking accuracy. Instead of using ASR hypothesis as model input as in DSTC2, here we use text based input which has much lower noise level in the evaluation of the movie booking tasks. This partially explains the higher DST accuracy in the movie booking domain comparing to DSTC2.  \n\n![](images/image_3.jpg)  \n\nTable 1: Dialogue state tracking results on DSTC2   \n\n![](images/image_4.jpg)  \nTable 2: DST results on movie booking dataset  \n\n# 4.4 Imitation and RL Results  \n\nEvaluations of interactive learning with imitation and reinforcement learning are made on metrics of (1) task success rate, (2) dialogue turn size, and (3) DST accuracy. Figures 3, 4, and 5 show the learning curves for the three evaluation metrics. In addition, we compare model performance on task success rate using two different RL training settings, the end-to-end training and the policyonly training, to show the advantages of performing end-to-end system optimization with RL.  \n\nTask Success Rate As shown in the learning curves in Figure 3, the SL model performs poorly. This might largely due to the compounding errors caused by the mismatch of dialogue state distribution between offline training and interactive learning. We use an extended set of user NLG templates during interactive evaluation. Many of the test NLG templates are not seen by the supervised training agent. Any mistake made by the agent in understanding the user’s request may lead to compounding errors in the following dialogue turns, which cause final task failure. The red curve $\\left(\\mathrm{SL}\\ +\\ \\mathrm{RL}\\right)$ shows the performance of the model that has RL applied on the supervised pre-training model. We can see that interactive learning with RL using a weak form of supervision from user feedback continuously improves the task success rate with the growing number of user interactions. We further conduct experiments in learning dialogue model from scratch using only RL (i.e. without supervised pre-training), and the task success rate remains at a very low level after 10K dialogue simulations. We believe that it is because the dialogue state space is too complex for the agent to learn from scratch, as it has to learn a good NLU model in combination with a good policy to complete the task. The yellow curve $\\mathrm{(SL+\\Delta\\OmegaIL}$ $500+\\mathrm{~\\textmu~{~R~L~}~}$ shows the performance of the model that has 500 episodes of imitation learning over the SL model and continues with RL optimization. It is clear from the results that applying imitation learning on supervised training model efficiently improves task success rate. RL optimization after imitation learning increases the task success rate further. The blue curve $\\mathrm{~\\textit~{~\\textcent~}~}+\\mathrm{~\\textit~{~I~L~}~}1000\\mathrm{~\\textit~{~+~}~}$ RL) shows the performance of the model that has 1000 episodes of imitation learning over the SL model and continues with RL. Similarly, it shows hints that imitation learning may effectively adapt the supervised training model to the dialogue state distribution during user interactions.  \n\n![](images/image_5.jpg)  \nFigure 3: Interactive learning curves on task success rate.  \n\nAverage Dialogue Turn Size Figure 4 shows the curves for the average turn size of successful dialogues. We observe decreasing number of dialogue turns in completing a task along the growing number of interactive learning sessions. This shows that the dialogue agent learns better strategies in successfully completing the task with fewer number of dialogue turns. The red curve with RL applied directly after supervised pre-training model gives the lowest average number of turns at the end of the interactive learning cycles, comparing to models with imitation dialogue learning. This seems to be contrary to our observation in Figure 3 that imitation learning with human teaching helps in achieving higher task success rate. By looking into the generated dialogues, we find that the SL $+$ RL model can handle easy tasks well but fails to complete more challenging tasks. Such easy tasks typically can be handled with fewer number of turns, which result in the low average turn size for the $\\begin{array}{r l r}{{\\mathrm{SL}}}&{{}+}&{{\\mathrm{RL}}}\\end{array}$ model. On the other hand, the imitation plus RL models attempt to learn better strategies to handle those more challenging tasks, resulting in higher task success rates and also slightly",
    "chunk_order_index": 5,
    "full_doc_id": "doc-56023876aad527eb1f7c4a37dacd7576"
  },
  "chunk-e66ce441e74f5f71549e88941907166c": {
    "tokens": 1200,
    "content": "model can handle easy tasks well but fails to complete more challenging tasks. Such easy tasks typically can be handled with fewer number of turns, which result in the low average turn size for the $\\begin{array}{r l r}{{\\mathrm{SL}}}&{{}+}&{{\\mathrm{RL}}}\\end{array}$ model. On the other hand, the imitation plus RL models attempt to learn better strategies to handle those more challenging tasks, resulting in higher task success rates and also slightly increased dialogue length comparing to $\\begin{array}{r l r}{{\\mathrm{S}}\\,\\mathrm{L}}&{{}+}&{\\mathrm{RL}}\\end{array}$ model.  \n\n![](images/image_6.jpg)  \nFigure 4: Interactive learning curves on average dialogue turn size.  \n\nDialogue State Tracking Accuracy Similar to the results on task success rate, we see that imitation learning with human teaching quickly improves dialogue state tracking accuracy in just a few hundred interactive learning sessions. The joint slots tracking accuracy in the evaluation of SL model using fixed corpus is $84.57\\%$ as in Table 4.3. The accuracy drops to $50.51\\%$ in the interactive evaluation with the introduction of new NLG templates. Imitation learning with human teaching effectively adapts the neural dialogue model to the new user input and dialogue state distributions, improving the DST accuracy to $67.47\\%$ after only 500 imitation dialogue learning sessions. Another encouraging observation is that RL on top of SL model and IL model not only improves task success rate by optimizing dialogue policy, but also further improves dialogue state tracking performance. This shows the benefits of performing endto-end optimization of the neural dialogue model with RL during interactive learning.  \n\n![](images/image_7.jpg)  \nFigure 5: Interactive learning curves on dialogue state tracking accuracy.  \n\n![](images/image_8.jpg)  \nFigure 6: Interactive learning curves on task success rate with different RL training settings.  \n\nEnd-to-End RL Optimization To further show the benefit of performing end-to-end optimization of dialogue agent, we compare models with two different RL training settings, the end-to-end training and the policy-only training. End-to-end RL training is what we applied in previous evaluation sections, in which the gradient propagates from system action output layer all the way back to the natural language user input layer. Policy-only training refers to only updating the policy network parameters during interactive learning with RL, with all the other underlying system parameters fixed. The evaluation results are shown in Figure 6. From these learning curves, we see clear advantage of performing end-to-end model update in achieving higher dialogue task success rate during interactive learning comparing to only updating the policy network.  \n\n# 4.5 Human User Evaluations  \n\nWe further evaluate the proposed method with human judges recruited via Amazon Mechanical Turk. Each judge is asked to read a dialogue between our model and user simulator and rate each system turn on a scale of 1 (frustrating) to 5 (optimal way to help the user). Each turn is rated by 3 different judges. We collect and rate 100 dialogues for each of the three models: (i) SL model, (ii) SL model followed by 1000 episodes of IL, (iii) SL and IL followed by RL. Table 3 lists the mean and standard deviation of human scores overall system turns. Performing interactive learning with imitation and reinforcement learning clearly improves the quality of the model according to human judges.  \n\n![](images/image_9.jpg)  \n\nTable 3: Human evaluation results. Mean and standard deviation of crowd worker scores (between 1 to 5).  \n\n# 5 Conclusions  \n\nIn this work, we focus on training task-oriented dialogue systems through user interactions, where the agent improves through communicating with users and learning from the mistake it makes. We propose a hybrid learning approach for such systems using end-to-end trainable neural network model. We present a hybrid imitation and reinforcement learning method, where we firstly train a dialogue agent in a supervised manner by learning from dialogue corpora, and continuously to improve it by learning from user teaching and feedback with imitation and reinforcement learning. We evaluate the proposed learning method with both offline evaluation on fixed dialogue corpora and interactive evaluation with users. Experimental results show that the proposed neural dialogue agent can effectively learn from user teaching and improve task success rate with imitation learning. Applying reinforcement learning with user feedback after imitation learning with user teaching improves the model performance further, not only on the dialogue policy but also on the dialogue state tracking in the end-to-end training framework.  \n\n# References  \n\nAntoine Bordes and Jason Weston. 2017. Learning end-to-end goal-oriented dialog. In International Conference on Learning Representations.  \n\nBhuwan Dhingra, Lihong Li, Xiujun Li, Jianfeng Gao, Yun-Nung Chen, Faisal Ahmed, and Li Deng. 2017. Towards end-to-end reinforcement learning of dialogue agents for information access. In ACL.  \n\nMihail Eric and Christopher D Manning. 2017. A copy-augmented sequence-to-sequence architecture gives good performance on task-oriented dialogue. In EACL.  \n\nMilica Gasˇic´, Catherine Breslin, Matthew Henderson, Dongho Kim, Martin Szummer, Blaise Thomson, Pirros Tsiakoulis, and Steve Young. 2013. Online policy optimisation of bayesian spoken dialogue systems via human interaction. In ICASSP.  \n\nMilica Gasic and Steve Young. 2014. Gaussian processes for pomdp-based dialogue manager optimization. IEEE/ACM Transactions on Audio, Speech, and Language Processing .  \n\nDilek Hakkani-Tu¨r, G¨okhan Tu¨r, Asli Celikyilmaz, Yun-Nung Chen, Jianfeng Gao, Li Deng, and YeYi Wang. 2016",
    "chunk_order_index": 6,
    "full_doc_id": "doc-56023876aad527eb1f7c4a37dacd7576"
  },
  "chunk-59b53a3b966b99729d304a1c3fab7830": {
    "tokens": 1200,
    "content": "optimisation of bayesian spoken dialogue systems via human interaction. In ICASSP.  \n\nMilica Gasic and Steve Young. 2014. Gaussian processes for pomdp-based dialogue manager optimization. IEEE/ACM Transactions on Audio, Speech, and Language Processing .  \n\nDilek Hakkani-Tu¨r, G¨okhan Tu¨r, Asli Celikyilmaz, Yun-Nung Chen, Jianfeng Gao, Li Deng, and YeYi Wang. 2016. Multi-domain joint semantic frame parsing using bi-directional rnn-lstm. In Interspeech.  \n\nJames Henderson, Oliver Lemon, and Kallirroi Georgila. 2008. Hybrid reinforcement/supervised learning of dialogue policies from fixed data sets. Computational Linguistics .  \n\nMatthew Henderson, Blaise Thomson, and Jason Williams. 2013. Dialog state tracking challenge 2 & 3. http://camdial.org/˜mh521/dstc/.  \n\nMatthew Henderson, Blaise Thomson, and Jason Williams. 2014a. The second dialog state tracking challenge. In SIGDIAL.  \n\nMatthew Henderson, Blaise Thomson, and Steve Young. 2014b. Robust dialog state tracking using delexicalised recurrent neural networks and unsupervised gate. In IEEE SLT.  \n\nMatthew Henderson, Blaise Thomson, and Steve Young. 2014c. Word-based dialog state tracking with recurrent neural networks. In SIGDIAL.  \n\nFilip Jurcˇ´ıcˇek, Blaise Thomson, and Steve Young. 2012. Reinforcement learning for parameter estimation in statistical spoken dialogue systems. Computer Speech & Language 26(3):168–192.  \n\nDiederik Kingma and Jimmy Ba. 2014. Adam: A method for stochastic optimization. In International Conference on Learning Representations.  \n\nJiwei Li, Michel Galley, Chris Brockett, Georgios P Spithourakis, Jianfeng Gao, and Bill Dolan. 2016. A persona-based neural conversation model. In ACL.  \n\nXuijun Li, Yun-Nung Chen, Lihong Li, and Jianfeng Gao. 2017. End-to-end task-completion neural dialogue systems. arXiv preprint arXiv:1703.01008 .   \nBing Liu and Ian Lane. 2016. Joint online spoken language understanding and language modeling with recurrent neural networks. In SIGDIAL.   \nBing Liu and Ian Lane. 2017a. An end-to-end trainable neural network model with belief tracking for taskoriented dialog. In Interspeech.   \nBing Liu and Ian Lane. 2017b. Iterative policy learning in end-to-end trainable task-oriented neural dialog models. In Proceedings of IEEE ASRU.   \nBing Liu, Gokhan Tur, Dilek Hakkani-Tur, Pararth Shah, and Larry Heck. 2017. End-to-end optimization of task-oriented dialogue model with deep reinforcement learning. In NIPS Workshop on Conversational AI.   \nFei Liu and Julien Perez. 2017. Gated end-to-end memory networks. In EACL.   \nGre´goire Mesnil, Yann Dauphin, Kaisheng Yao, Yoshua Bengio, Li Deng, Dilek Hakkani-Tur, Xiaodong He, Larry Heck, Gokhan Tur, Dong Yu, et al. 2015. Using recurrent neural networks for slot filling in spoken language understanding. IEEE/ACM Transactions on Audio, Speech and Language Processing (TASLP) .   \nNikola Mrksˇic´, Diarmuid O Se´aghdha, Tsung-Hsien Wen, Blaise Thomson, and Steve Young. 2016. Neural belief tracker: Data-driven dialogue state tracking. arXiv preprint arXiv:1606.03777 .   \nBaolin Peng, Xiujun Li, Lihong Li, Jianfeng Gao, Asli Celikyilmaz, Sungjin Lee, and Kam-Fai Wong. 2017. Composite task-completion dialogue policy learning via hierarchical deep reinforcement learning. In Proceedings of EMNLP.   \nAntoine Raux, Brian Langner, Dan Bohus, Alan W Black, and Maxine Eskenazi. 2005. Lets go public! taking a spoken dialog system to the real world. In Interspeech.   \nSte´phane Ross and Drew Bagnell. 2010. Efficient reductions for imitation learning. In Proceedings of the thirteenth international conference on artificial intelligence and statistics. pages 661–668.   \nSte´phane Ross, Geoffrey J Gordon, and Drew Bagnell. 2011. A reduction of imitation learning and structured prediction to no-regret online learning. In International Conference on Artificial Intelligence and Statistics. pages 627–635.   \nAlexander I Rudnicky, Eric H Thayer, Paul C Constantinides, Chris Tchou, R Shern, Kevin A Lenzo, Wei Xu, and Alice Oh. 1999. Creating natural dialogs in the carnegie mellon communicator system. In Eurospeech.   \nJost Schatzmann, Blaise Thomson, Karl Weilhammer, Hui Ye, and Steve Young. 2007. Agenda-based user simulation for bootstrapping a pomdp dialogue system. In NAACL-HLT.   \nMinjoon Seo, Ali Farhadi, and Hannaneh Hajishirzi. 2016. Query-regression networks for machine comprehension. arXiv preprint arXiv:1606.04582 .   \nIulian V Serban, Alessandro Sordoni, Yoshua Bengio, Aaron Courville, and Joelle Pineau. 2015. Building end-to-end dialogue systems using generative hierarchical neural network",
    "chunk_order_index": 7,
    "full_doc_id": "doc-56023876aad527eb1f7c4a37dacd7576"
  },
  "chunk-a8d929b5e5393c2ce057e656bec52ef2": {
    "tokens": 603,
    "content": "dialogue system. In NAACL-HLT.   \nMinjoon Seo, Ali Farhadi, and Hannaneh Hajishirzi. 2016. Query-regression networks for machine comprehension. arXiv preprint arXiv:1606.04582 .   \nIulian V Serban, Alessandro Sordoni, Yoshua Bengio, Aaron Courville, and Joelle Pineau. 2015. Building end-to-end dialogue systems using generative hierarchical neural network models. arXiv preprint arXiv:1507.04808 .   \nPararth Shah, Dilek Hakkani-Tu¨r, Liu Bing, and Gokhan Tu¨r. 2018. Bootstrapping a neural conversational agent with dialogue self-play, crowdsourcing and on-line reinforcement learning. In NAACLHLT.   \nPararth Shah, Dilek Hakkani-Tu¨r, and Larry Heck. 2016. Interactive reinforcement learning for taskoriented dialogue management. In NIPS 2016 Deep Learning for Action and Interaction Workshop.   \nPei-Hao Su, Pawel Budzianowski, Stefan Ultes, Milica Gasic, and Steve Young. 2017. Sample-efficient actor-critic reinforcement learning with supervised data for dialogue management. In SIGDIAL.   \nPei-Hao Su, Milica Gasic, Nikola Mrksic, Lina RojasBarahona, Stefan Ultes, David Vandyke, TsungHsien Wen, and Steve Young. 2016. On-line active reward learning for policy optimisation in spoken dialogue systems. In ACL.   \nTsung-Hsien Wen, David Vandyke, Nikola Mrkˇsic´, Milica Gasˇic´, Lina M. Rojas-Barahona, Pei-Hao Su, Stefan Ultes, and Steve Young. 2017. A networkbased end-to-end trainable task-oriented dialogue system. In EACL.   \nJason D Williams, Kavosh Asadi, and Geoffrey Zweig. 2017. Hybrid code networks: practical and efficient end-to-end dialog control with supervised and reinforcement learning. In ACL.   \nJason D Williams and Geoffrey Zweig. 2016. Endto-end lstm-based dialog control optimized with supervised and reinforcement learning. arXiv preprint arXiv:1606.01269 .   \nRonald J Williams. 1992. Simple statistical gradientfollowing algorithms for connectionist reinforcement learning. Machine learning .   \nSteve Young, Milica Gasˇic´, Blaise Thomson, and Jason D Williams. 2013. Pomdp-based statistical spoken dialog systems: A review. Proceedings of the IEEE 101(5):1160–1179.   \nTiancheng Zhao and Maxine Eskenazi. 2016. Towards end-to-end learning for dialog state tracking and management using deep reinforcement learning. In SIGDIAL.",
    "chunk_order_index": 8,
    "full_doc_id": "doc-56023876aad527eb1f7c4a37dacd7576"
  }
}